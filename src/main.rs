mod crypto;
mod vault;
mod entry;
mod cli;
mod password_generator;

use cli::{Cli, Commands};
use entry::Entry;
use vault::Vault;
use std::path::Path;
use std::error::Error;
use clap::Parser;
use password_generator::{generate_password, generate_secure_password};
use clipboard::{ClipboardContext, ClipboardProvider};

const VAULT_FILE: &str = "data\\vault.enc";

fn main() -> Result<(), Box<dyn Error>> {
    let cli = Cli::parse();
    
    match &cli.command {
        Commands::Init => {
            println!("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ hiho...");
            let password = rpassword::prompt_password("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")?;
            let vault = Vault::new(&password)?;
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            std::fs::create_dir_all("data")?;
            
            vault.save_to_file(Path::new(VAULT_FILE))?;
            println!("‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ!");
        }
        Commands::Add { name, username, password, length } => {
            let master_password = rpassword::prompt_password("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")?;
            let mut vault = Vault::new(&master_password)?;
            
            if Path::new(VAULT_FILE).exists() {
                vault.load_from_file(Path::new(VAULT_FILE))?;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            let final_password = match password {
                Some(p) => p.clone(),
                None => {
                    println!("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π {} —Å–∏–º–≤–æ–ª–æ–≤...", length);
                    generate_secure_password(*length)
                }
            };
            
            let entry = Entry {
                name: name.clone(),
                username: username.clone(),
                password: final_password,
            };
            
            vault.add_entry(entry);
            vault.save_to_file(Path::new(VAULT_FILE))?;
            println!("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
        }
        Commands::List => {
            let master_password = rpassword::prompt_password("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")?;
            let mut vault = Vault::new(&master_password)?;
            
            if Path::new(VAULT_FILE).exists() {
                vault.load_from_file(Path::new(VAULT_FILE))?;
            }
            
            println!("üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:");
            for (i, entry) in vault.list_entries().iter().enumerate() {
                println!("{}. {}: {} - {}", i+1, entry.name, entry.username, entry.password);
            }
        }
        Commands::Generate { length, secure } => {
            let password = if *secure {
                generate_secure_password(*length)
            } else {
                generate_password(*length)
            };
            println!("üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {}", password);
        }
        Commands::Copy { name_or_index } => {
            let master_password = rpassword::prompt_password("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")?;
            let mut vault = Vault::new(&master_password)?;
            
            if Path::new(VAULT_FILE).exists() {
                vault.load_from_file(Path::new(VAULT_FILE))?;
            }
            
            let entries = vault.list_entries();
            if entries.is_empty() {
                println!("üì≠ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ!");
                return Ok(());
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if let Ok(index) = name_or_index.parse::<usize>() {
                if index > 0 && index <= entries.len() {
                    let entry = &entries[index - 1];
                    copy_to_clipboard(&entry.password)?;
                    println!("‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è '{}' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!", entry.name);
                    return Ok(());
                }
            }
            
            // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏
            for entry in entries {
                if entry.name == *name_or_index {
                    copy_to_clipboard(&entry.password)?;
                    println!("‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è '{}' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!", entry.name);
                    return Ok(());
                }
            }
            
            println!("‚ùå –ó–∞–ø–∏—Å—å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", name_or_index);
        }
        Commands::Remove { name_or_index } => {
            let master_password = rpassword::prompt_password("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")?;
            let mut vault = Vault::new(&master_password)?;
            
            if Path::new(VAULT_FILE).exists() {
                vault.load_from_file(Path::new(VAULT_FILE))?;
            }
            
            let entries = vault.list_entries();
            if entries.is_empty() {
                println!("üì≠ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ!");
                return Ok(());
            }
            
            let mut found_index = None;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if let Ok(index) = name_or_index.parse::<usize>() {
                if index > 0 && index <= entries.len() {
                    found_index = Some(index - 1);
                }
            } else {
                // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏
                for (i, entry) in entries.iter().enumerate() {
                    if entry.name == *name_or_index {
                        found_index = Some(i);
                        break;
                    }
                }
            }
            
            if let Some(index) = found_index {
                let entry = &entries[index];
                println!("üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: {} - {}?", entry.name, entry.username);
                println!("–í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:");
                
                let mut input = String::new();
                std::io::stdin().read_line(&mut input)?;
                
                if input.trim().to_lowercase() == "y" {
                    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ Vault)
                    println!("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ - —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ!");
                }
            } else {
                println!("‚ùå –ó–∞–ø–∏—Å—å '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", name_or_index);
            }
        }
    }
    
    Ok(())
}

fn copy_to_clipboard(text: &str) -> Result<(), Box<dyn Error>> {
    let mut ctx: ClipboardContext = ClipboardProvider::new()?;
    ctx.set_contents(text.to_owned())?;
    Ok(())
}